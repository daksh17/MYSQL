-- Column Aliases in order by clause to avoid long query 

-- can be upto 256 char long 


SELECT CONCAT(first_name, ' ', last_name, ' played in ', title) AS movie
-> FROM actor JOIN film_actor USING (actor_id)
-> JOIN film USING (film_id)
-> ORDER BY movie LIMIT 20

-- using entire concat function instead column alias 

mysql> SELECT CONCAT(first_name, ' ', last_name, ' played in ', title) AS movie
    -> FROM actor JOIN film_actor USING (actor_id)
    -> JOIN film USING (film_id)
    -> ORDER BY CONCAT(first_name, ' ', last_name, ' played in ', title)  LIMIT 20


 -- can not use alias in where /on /using clause  but can be used in order By/having /group by clause 

mysql> SELECT first_name AS name FROM actor WHERE name = 'ZERO CAGE';

ERROR 1054 (42S22): Unknown column 'name' in 'where clause'



Table Alias  

-- can be upto 256 char long 

-- can be used in where /on and using clause 

--  if an alias has been used for a table, itâ€™s impossible to refer to that table without using its new alias

e.g. 

mysql> SELECT ac.actor_id, ac.first_name, ac.last_name, fl.title FROM
    -> actor AS ac INNER JOIN film_actor AS fla USING (actor_id)
    -> INNER JOIN film AS fl USING (film_id)
    -> WHERE film.title = 'AFFAIR PREJUDICE';

ERROR 1054 (42S22): Unknown column 'film.title' in 'where clause'


-- correct query 

mysql> SELECT ac.actor_id, ac.first_name, ac.last_name, fl.title FROM
    -> actor AS ac INNER JOIN film_actor AS fla USING (actor_id)
    -> INNER JOIN film AS fl USING (film_id)
    -> WHERE fl.title = 'AFFAIR PREJUDICE';  -- use alias 'fl' instead table Name 


-- self join is possible using table alias 

-- if we need to see the table have duplicate entry of movie then we need to match movie with the title and also should not have ID 
-- since there is no duplicate movie detail in table so we wont see any result 

mysql> SELECT m1.film_id, m2.title
    -> FROM film AS m1, film AS m2
    -> WHERE m1.title = m2.title
    -> AND m1.film_id <> m2.film_id;

Empty set (0.00 sec)

-- aggregate function   

-- 1) distinct function 
-- The DISTINCT clause applies to the query output and removes rows that have identical values in the columns 
-- selected for output in the query.

mysql> SELECT DISTINCT first_name
    -> FROM actor JOIN film_actor USING (actor_id);

    -- return 128 rows 


mysql> SELECT DISTINCT first_name, last_name
    -> FROM actor JOIN film_actor USING (actor_id);

-- return 199 rows 



-- count function 

mysql> SELECT COUNT(*) FROM customer;
+----------+
| count(*) |
+----------+
|      599 |
+----------+

mysql> SELECT COUNT(email) FROM customer;
+--------------+
| count(email) |
+--------------+
|          598 |
+--------------+



-- having clause 

mysql> SELECT first_name, last_name, COUNT(film_id)
    -> FROM actor INNER JOIN film_actor USING (actor_id)
    -> GROUP BY actor_id, first_name, last_name
    -> ORDER BY COUNT(film_id) DESC;

-- return 200  rows (unique values)

mysql> SELECT first_name, last_name, COUNT(film_id)
    -> FROM actor INNER JOIN film_actor USING (actor_id)
    -> GROUP BY  first_name, last_name
    -> ORDER BY COUNT(film_id) DESC;

-- return 199 rows since 2 person have same first and last name 



-- having clause with column  alias

mysql> SELECT title, COUNT(rental_id) AS num_rented FROM
    -> film INNER JOIN inventory USING (film_id)
    -> INNER JOIN rental USING (inventory_id)
    -> GROUP BY title
    -> HAVING num_rented > 30
    -> ORDER BY num_rented DESC LIMIT 5;

-- bad use of having clause 







-- union operator to find top 5 and least 5 selling movies 

/*If you want to apply LIMIT or ORDER BY to an individual query that is part of a UNION statement,
 enclose that query in parentheses
*/

(SELECT title, COUNT(rental_id) AS num_rented
    -> FROM film JOIN inventory USING (film_id)
    -> JOIN rental USING (inventory_id)
    -> GROUP BY title ORDER BY num_rented DESC LIMIT 5)
    -> UNION
    -> (SELECT title, COUNT(rental_id) AS num_rented
    -> FROM film JOIN inventory USING (film_id)
    -> JOIN rental USING (inventory_id)
    -> GROUP BY title ORDER BY num_rented ASC LIMIT 5);



-- by default union  will provide the distinct result 

mysql> SELECT first_name FROM actor WHERE actor_id = 88
    -> UNION
    -> SELECT first_name FROM actor WHERE actor_id = 169;

-- by default union all will provide the all the result include duplicate rows  
 
    mysql> SELECT first_name FROM actor WHERE actor_id = 88
    -> UNION all
    -> SELECT first_name FROM actor WHERE actor_id = 169;



    -- order by with limit will sort the output in union but if just order by in union then 
    --mysql does not perform the sorting 

mysql> (SELECT title, rental_date, return_date
    -> FROM film JOIN inventory USING (film_id)
    -> JOIN rental USING (inventory_id)
    -> WHERE film_id = 998
    -> ORDER BY rental_date ASC)
    -> UNION ALL
    -> (SELECT title, rental_date, return_date
    -> FROM film JOIN inventory USING (film_id)
    -> JOIN rental USING (inventory_id)
    -> WHERE film_id = 998
    -> ORDER BY rental_date ASC LIMIT 5);


+--------------+---------------------+---------------------+
| title        | rental_date         | return_date         |
+--------------+---------------------+---------------------+
| ZHIVAGO CORE | 2005-06-17 03:19:20 | 2005-06-21 00:19:20 |
| ZHIVAGO CORE | 2005-07-07 12:18:57 | 2005-07-12 09:47:57 |
| ZHIVAGO CORE | 2005-07-27 14:53:55 | 2005-07-31 19:48:55 |
| ZHIVAGO CORE | 2005-08-20 17:18:48 | 2005-08-26 15:31:48 |
| ZHIVAGO CORE | 2005-05-30 05:15:20 | 2005-06-07 00:49:20 |
| ZHIVAGO CORE | 2005-06-18 06:46:54 | 2005-06-26 09:48:54 |
| ZHIVAGO CORE | 2005-07-12 05:24:02 | 2005-07-16 03:43:02 |
| ZHIVAGO CORE | 2005-08-02 02:05:04 | 2005-08-10 21:58:04 |
| ZHIVAGO CORE | 2006-02-14 15:16:03 | NULL                |

-- the above output  from 1st subquery is not in correct order even we used order by clause 
-- the below output  from 2nd subquery is in correct order since we used the limit operation  


| ZHIVAGO CORE | 2005-05-30 05:15:20 | 2005-06-07 00:49:20 |
| ZHIVAGO CORE | 2005-06-17 03:19:20 | 2005-06-21 00:19:20 |
| ZHIVAGO CORE | 2005-06-18 06:46:54 | 2005-06-26 09:48:54 |
| ZHIVAGO CORE | 2005-07-07 12:18:57 | 2005-07-12 09:47:57 |
| ZHIVAGO CORE | 2005-07-12 05:24:02 | 2005-07-16 03:43:02 |
+--------------+---------------------+---------------------+




-- alternate to union  with  putting  the limit on number of return result  

mysql> (SELECT first_name, last_name FROM actor WHERE actor_id < 5)
    -> UNION
    -> (SELECT first_name, last_name FROM actor WHERE actor_id > 190)
    -> ORDER BY first_name LIMIT 4;
    
+------------+-----------+
| first_name | last_name |
+------------+-----------+
| BELA       | WALKEN    |
| BURT       | TEMPLE    |
| ED         | CHASE     |
| GREGORY    | GOODING   |
+------------+-----------+
4 rows in set (0.00 sec)

-- same output can be achived using or condition 

mysql> SELECT first_name, last_name FROM actor
    -> WHERE actor_id < 5 OR actor_id > 190
    -> ORDER BY first_name LIMIT 4;
+------------+-----------+
| first_name | last_name |
+------------+-----------+
| BELA       | WALKEN    |
| BURT       | TEMPLE    |
| ED         | CHASE     |
| GREGORY    | GOODING   |
+------------+-----------+
4 rows in set (0.00 sec)


-- left join different output 


mysql> SELECT email, name AS category_name, COUNT(rental_id) AS cnt
    -> FROM category cat LEFT JOIN film_category USING (category_id)
    -> LEFT JOIN inventory USING (film_id)
    -> LEFT JOIN rental USING (inventory_id)
    -> LEFT JOIN customer cs USING (customer_id)
    -> WHERE cs.email = 'WESLEY.BULL@sakilacustomer.org'
    -> GROUP BY email, category_name
    -> ORDER BY cnt DESC;

-- will provide correct 14 result where email is 'WESLEY.BULL@sakilacustomer.org'


mysql> SELECT email, name AS category_name, COUNT(rental_id) AS cnt
    -> FROM category cat LEFT JOIN film_category USING (category_id)
    -> LEFT JOIN inventory USING (film_id)
    -> LEFT JOIN rental USING (inventory_id)
    -> LEFT JOIN customer cs ON rental.customer_id = cs.customer_id
    -> AND cs.email = 'WESLEY.BULL@sakilacustomer.org'
    -> GROUP BY email, category_name
    -> ORDER BY cnt DESC;

    
-- will provide correct 14 result where email is 'WESLEY.BULL@sakilacustomer.org' and rest output with email as null so 
total 31 records 



-- nested query 

outer query =ANY(inner query)  == outer query IN(inner query)

-- =ANY operator 

mysql> SELECT emp_no, first_name, last_name
    -> FROM employees JOIN titles USING (emp_no)
    -> WHERE title = 'Manager'
    -> AND emp_no = ANY (SELECT emp_no FROM employees
    -> JOIN titles USING (emp_no) WHERE
    -> title <> 'Manager');

-- IN operator 

    mysql> SELECT emp_no, first_name, last_name
    -> FROM employees JOIN titles USING (emp_no)
    -> WHERE title = 'Manager'
    -> AND emp_no IN(SELECT emp_no FROM employees
    -> JOIN titles USING (emp_no) WHERE
    -> title <> 'Manager');


-- using join condition 

mysql> SELECT DISTINCT emp_no, first_name, last_name
    -> FROM employees JOIN titles mgr USING (emp_no)
    -> JOIN titles nonmgr USING (emp_no)
    -> WHERE mgr.title = 'Manager'
    -> AND nonmgr.title <> 'Manager';


  --  ANY keyword returns values that satisfy at least one condition (Boolean OR), the ALL keyword returns values only where all the conditions are satisfied (Boolean AND).
  --We can use the alias NOT IN in place of <> ANY or != ANY.


  --row subquery 


mysql> SELECT mgr.emp_no, YEAR(mgr.from_date) AS fd
    -> FROM titles AS mgr, titles AS other
    -> WHERE mgr.emp_no = other.emp_no
    -> AND mgr.title = 'Manager'
    -> AND mgr.title <> other.title
    -> AND YEAR(mgr.from_date) = YEAR(other.from_date);
+--------+------+
| emp_no | fd   |
+--------+------+
| 110765 | 1989 |
| 111784 | 1988 |
+--------+------+
2 rows in set (0.11 sec)


-- using row subquery 


mysql> SELECT emp_no, YEAR(from_date) AS fd
    -> FROM titles WHERE title = 'Manager' AND
    -> (emp_no, YEAR(from_date)) IN
    -> (SELECT emp_no, YEAR(from_date)
    -> FROM titles WHERE title <> 'Manager');
+--------+------+
| emp_no | fd   |
+--------+------+
| 110765 | 1989 |
| 111784 | 1988 |
+--------+------+
2 rows in set (0.12 sec)

/* The row subquery syntax allows you to compare multiple values per row. The expression (emp_no, YEAR(from_date)) means two values per row are compared to the output of the subquery. You can see following the IN keyword that the subquery returns two values, emp_no and YEAR(from_date). So, the fragment:
(emp_no, YEAR(from_date)) IN (SELECT emp_no, YEAR(from_date)
FROM titles WHERE title <> 'Manager')
*/



-- type os the subqueries 

/* 

1) column subqueries -- IN and ANY 

 column subqueryâ€”that is, the results returned by the subquery are one or more values from a column,
 instead of a single scalar value as in the previous section. With this, 
you can now compare a column value from an outer query to a set of values returned from a subquery.

mysql> SELECT emp_no, first_name, last_name
    -> FROM employees JOIN titles USING (emp_no)
    -> WHERE title = 'Manager'
    -> AND emp_no = ANY (SELECT emp_no FROM employees
    -> JOIN titles USING (emp_no) WHERE
    -> title <> 'Manager');


2) row subqueries 

mysql> SELECT emp_no, YEAR(from_date) AS fd
    -> FROM titles WHERE title = 'Manager' AND
    -> (emp_no, YEAR(from_date)) IN
    -> (SELECT emp_no, YEAR(from_date)
    -> FROM titles WHERE title <> 'Manager');

3) scaler subqueries -- return just values from subquery 




4) co related subqueries  -- using exist and not exist 
 where a table used in the outer query is referenced in the subquery

Correlated subqueries are often used with the IN statement weâ€™ve already discussed and almost 
always used with the EXISTS and NOT EXISTS clauses that are the focus of this section.
When the subquery is true, the outer query that uses the EXISTS clause returns a row. 
The overall result is that all rows in the film table are counted because, 
for each one, the subquery is true.
It doesnâ€™t actually matter what you select in an inner query when youâ€™re using the EXISTS clause, 

since itâ€™s not used by the outer query anyway. You can select one column, everything,
or even a constant (as in SELECT 'cat' from film), and itâ€™ll have the same effect.
*/

-- using join 

mysql> SELECT emp_no, first_name, last_name
    -> FROM employees JOIN titles USING (emp_no)
    -> WHERE title = 'Manager'
    -> AND emp_no IN (SELECT emp_no FROM employees
    -> JOIN titles USING (emp_no) WHERE
    -> title <> 'Manager');y, though, youâ€™ll see most SQL authors write SELECT * by convention.

-- using exists operatoer 

mysql> SELECT emp_no, first_name, last_name
    -> FROM employees JOIN titles USING (emp_no)
    -> WHERE title = 'Manager'
    -> AND EXISTS (SELECT emp_no FROM titles
    -> WHERE titles.emp_no = employees.emp_no
    -> AND title <> 'Manager');

------------------------------------------------

-- Nested queries in the from clause 


mysql> SELECT emp_no, monthly_salary FROM
    -> (SELECT emp_no, salary/12 AS monthly_salary FROM salaries) AS ms
    -> LIMIT 5;


-- if the alias is not define then we will get the error as mention 

mysql> SELECT emp_no, monthly_salary FROM
    -> (SELECT emp_no, salary/12 AS monthly_salary FROM salaries)
    -> LIMIT 5;

ERROR 1248 (42000): Every derived table must have its own alias

mysql> SELECT AVG(gross) FROM
    -> (SELECT SUM(amount) AS gross
    -> FROM payment JOIN rental USING (rental_id)
    -> JOIN inventory USING (inventory_id)
    -> JOIN film USING (film_id)
    -> GROUP BY film_id) AS gross_amount;
+------------+
| AVG(gross) |
+------------+
|  70.361754 |
+------------+
1 row in set (0.05 sec)
You can see that the inner query joins together payment, rental, inventory, and film, and groups the sales together by film so you can get a sum for each film. If you run it in isolation, hereâ€™s what happens:
mysql> SELECT SUM(amount) AS gross
    -> FROM payment JOIN rental USING (rental_id)
    -> JOIN inventory USING (inventory_id)
    -> JOIN film USING (film_id)
    -> GROUP BY film_id;
+--------+
| gross  |
+--------+
|  36.77 |
|  52.93 |
|  37.88 |
|    ... |
|  14.91 |
|  73.83 |
| 214.69 |
+--------+
958 rows in set (0.08 sec)
Now, the outer query takes these sumsâ€”which are aliased as gross--and averages them to give the final result. This query is the typical way that you apply two aggregate functions to one set of data. You canâ€™t apply aggregate functions in a cascade, as in AVG(SUM(amount)):

mysql> SELECT AVG(SUM(amount)) AS avg_gross
    -> FROM payment JOIN rental USING (rental_id)
    -> JOIN inventory USING (inventory_id)
    -> JOIN film USING (film_id) GROUP BY film_id;
ERROR 1111 (HY000): Invalid use of group function

With subqueries in FROM clauses, you can return a scalar value, a set of column values, more than one row, 
or even a whole table. However, you canâ€™t use correlated subqueries, meaning that you canâ€™t reference tables or
 columns from tables that arenâ€™t explicitly listed in the subquery. 
Note also that you must alias the whole subquery using the AS keyword and
 give it a name, even if you donâ€™t use that name anywhere in the query.




--- Nested queries in joins 


mysql> SELECT cat.name AS category_name, COUNT(cat.category_id) AS cnt
    -> FROM category AS cat LEFT JOIN film_category USING (category_id)
    -> LEFT JOIN inventory USING (film_id)
    -> LEFT JOIN rental USING (inventory_id)
    -> JOIN customer AS cs ON rental.customer_id = cs.customer_id
    -> WHERE cs.email = 'WESLEY.BULL@sakilacustomer.org'
    -> GROUP BY category_name ORDER BY cnt DESC;
+-------------+-----+
| name        | cnt |
+-------------+-----+
| Games       |   9 |
| Foreign     |   6 |
| ...               |
| ...               |
| Comedy      |   1 |
| Sports      |   1 |
+-------------+-----+
14 rows in set (0.00 sec)
Now that we know about subqueries and joins and that subqueries can be used in joins, we can easily finish the task. This is our new query:
mysql> SELECT cat.name AS category_name, cnt
    -> FROM category AS cat
    -> LEFT JOIN (SELECT cat.name, COUNT(cat.category_id) AS cnt
    ->    FROM category AS cat
    ->    LEFT JOIN film_category USING (category_id)
    ->    LEFT JOIN inventory USING (film_id)
    ->    LEFT JOIN rental USING (inventory_id)
    ->    JOIN customer cs ON rental.customer_id = cs.customer_id
    ->    WHERE cs.email = 'WESLEY.BULL@sakilacustomer.org'
    ->    GROUP BY cat.name) customer_cat USING (name)
    -> ORDER BY cnt DESC;
+-------------+------+
| name        | cnt  |
+-------------+------+
| Games       |    9 |
| Foreign     |    6 |
| ...                |
| Children    |    1 |
| Sports      |    1 |
| Sci-Fi      | NULL |
| Action      | NULL |
| Thriller    | NULL |
+-------------+------+
17 rows in set (0.01 sec)
Finally, we get all the categories displayed, and we get NULL values for those where no rentals were made. Letâ€™s review whatâ€™s going on in our new query. The subquery, which we aliased as customer_cat, is our previous query without the ORDER BY clause. Thus, we know what it will return: 14 rows for categories in which Wesley rented something, and the number of rentals in each. Next, use LEFT JOIN to concatenate that information to the full list of categories from the category table. The category table is driving the join, so itâ€™ll have every row selected. We join the subquery using the name column that matches between the subqueryâ€™s output and the category tableâ€™s column.
The technique we showed here is a very powerful one; however, as always with subqueries, it comes at a cost. MySQL cannot optimize the whole query as efficiently when a subquery is present in the join clause.















